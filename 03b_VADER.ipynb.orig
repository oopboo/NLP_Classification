{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Table of Contents\n",
    "\n",
    "1. [Imports](#Imports)\n",
    "2. [VADER Sentiment Analysis](#VADER-Sentiment-Analysis)\n",
    "    1. [Modeling with CountVectorizer and LogisticRegression](#Modeling-with-CountVectorizer-and-LogisticRegression)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n",
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score, RandomizedSearchCV\n",
    "from sklearn.pipeline import Pipeline, make_pipeline\n",
    "from sklearn.metrics import confusion_matrix, plot_confusion_matrix, accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('./data/subreddits_EDA.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(16533, 9)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>subreddit</th>\n",
       "      <th>author</th>\n",
       "      <th>title</th>\n",
       "      <th>selftext</th>\n",
       "      <th>score</th>\n",
       "      <th>created_utc</th>\n",
       "      <th>eastern_time</th>\n",
       "      <th>post_word_count</th>\n",
       "      <th>title_word_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Oxygennotincluded</td>\n",
       "      <td>TrumpByPublicOpinion</td>\n",
       "      <td>Mod Idea - In game Programmable Logic Controllers</td>\n",
       "      <td>Hey everyone,\\n\\nBeen playing the game some ti...</td>\n",
       "      <td>1</td>\n",
       "      <td>1599762597</td>\n",
       "      <td>2020-09-10 14:29:57</td>\n",
       "      <td>108</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Oxygennotincluded</td>\n",
       "      <td>DaHedgehog27</td>\n",
       "      <td>Mod Request - Removing Construction Supply fro...</td>\n",
       "      <td>I have zero clue when it comes to modding this...</td>\n",
       "      <td>1</td>\n",
       "      <td>1599752065</td>\n",
       "      <td>2020-09-10 11:34:25</td>\n",
       "      <td>104</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Oxygennotincluded</td>\n",
       "      <td>KittehNevynette</td>\n",
       "      <td>Fertiliser flatulence power question. How much?</td>\n",
       "      <td>I saw a YT video where fertiliser synthesisers...</td>\n",
       "      <td>1</td>\n",
       "      <td>1599745896</td>\n",
       "      <td>2020-09-10 09:51:36</td>\n",
       "      <td>159</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Oxygennotincluded</td>\n",
       "      <td>Turalyon135</td>\n",
       "      <td>Automation question</td>\n",
       "      <td>Is there a way using a gate or any kind to hav...</td>\n",
       "      <td>1</td>\n",
       "      <td>1599737435</td>\n",
       "      <td>2020-09-10 07:30:35</td>\n",
       "      <td>148</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Oxygennotincluded</td>\n",
       "      <td>FoxRealistic3370</td>\n",
       "      <td>Perseverance or Experience</td>\n",
       "      <td>SOOOOO im on about cycle 1500 of my first base...</td>\n",
       "      <td>1</td>\n",
       "      <td>1599730988</td>\n",
       "      <td>2020-09-10 05:43:08</td>\n",
       "      <td>294</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           subreddit                author  \\\n",
       "0  Oxygennotincluded  TrumpByPublicOpinion   \n",
       "1  Oxygennotincluded          DaHedgehog27   \n",
       "2  Oxygennotincluded       KittehNevynette   \n",
       "3  Oxygennotincluded           Turalyon135   \n",
       "4  Oxygennotincluded      FoxRealistic3370   \n",
       "\n",
       "                                               title  \\\n",
       "0  Mod Idea - In game Programmable Logic Controllers   \n",
       "1  Mod Request - Removing Construction Supply fro...   \n",
       "2    Fertiliser flatulence power question. How much?   \n",
       "3                                Automation question   \n",
       "4                         Perseverance or Experience   \n",
       "\n",
       "                                            selftext  score  created_utc  \\\n",
       "0  Hey everyone,\\n\\nBeen playing the game some ti...      1   1599762597   \n",
       "1  I have zero clue when it comes to modding this...      1   1599752065   \n",
       "2  I saw a YT video where fertiliser synthesisers...      1   1599745896   \n",
       "3  Is there a way using a gate or any kind to hav...      1   1599737435   \n",
       "4  SOOOOO im on about cycle 1500 of my first base...      1   1599730988   \n",
       "\n",
       "          eastern_time  post_word_count  title_word_count  \n",
       "0  2020-09-10 14:29:57              108                 8  \n",
       "1  2020-09-10 11:34:25              104                 8  \n",
       "2  2020-09-10 09:51:36              159                 6  \n",
       "3  2020-09-10 07:30:35              148                 2  \n",
       "4  2020-09-10 05:43:08              294                 3  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(df.shape)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['stripped_text'] = df['selftext'].replace('\\nhttp\\S+', '', regex=True).replace('http\\S+', '', regex=True).replace('www\\S+', '', regex=True).replace('\\n\\n\\S+', '', regex=True).replace('\\n\\S+', '', regex=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>subreddit</th>\n",
       "      <th>author</th>\n",
       "      <th>title</th>\n",
       "      <th>selftext</th>\n",
       "      <th>score</th>\n",
       "      <th>created_utc</th>\n",
       "      <th>eastern_time</th>\n",
       "      <th>post_word_count</th>\n",
       "      <th>title_word_count</th>\n",
       "      <th>stripped_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Oxygennotincluded</td>\n",
       "      <td>TrumpByPublicOpinion</td>\n",
       "      <td>Mod Idea - In game Programmable Logic Controllers</td>\n",
       "      <td>Hey everyone,\\n\\nBeen playing the game some ti...</td>\n",
       "      <td>1</td>\n",
       "      <td>1599762597</td>\n",
       "      <td>2020-09-10 14:29:57</td>\n",
       "      <td>108</td>\n",
       "      <td>8</td>\n",
       "      <td>Hey everyone, playing the game some time now a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Oxygennotincluded</td>\n",
       "      <td>DaHedgehog27</td>\n",
       "      <td>Mod Request - Removing Construction Supply fro...</td>\n",
       "      <td>I have zero clue when it comes to modding this...</td>\n",
       "      <td>1</td>\n",
       "      <td>1599752065</td>\n",
       "      <td>2020-09-10 11:34:25</td>\n",
       "      <td>104</td>\n",
       "      <td>8</td>\n",
       "      <td>I have zero clue when it comes to modding this...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Oxygennotincluded</td>\n",
       "      <td>KittehNevynette</td>\n",
       "      <td>Fertiliser flatulence power question. How much?</td>\n",
       "      <td>I saw a YT video where fertiliser synthesisers...</td>\n",
       "      <td>1</td>\n",
       "      <td>1599745896</td>\n",
       "      <td>2020-09-10 09:51:36</td>\n",
       "      <td>159</td>\n",
       "      <td>6</td>\n",
       "      <td>I saw a YT video where fertiliser synthesisers...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Oxygennotincluded</td>\n",
       "      <td>Turalyon135</td>\n",
       "      <td>Automation question</td>\n",
       "      <td>Is there a way using a gate or any kind to hav...</td>\n",
       "      <td>1</td>\n",
       "      <td>1599737435</td>\n",
       "      <td>2020-09-10 07:30:35</td>\n",
       "      <td>148</td>\n",
       "      <td>2</td>\n",
       "      <td>Is there a way using a gate or any kind to hav...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Oxygennotincluded</td>\n",
       "      <td>FoxRealistic3370</td>\n",
       "      <td>Perseverance or Experience</td>\n",
       "      <td>SOOOOO im on about cycle 1500 of my first base...</td>\n",
       "      <td>1</td>\n",
       "      <td>1599730988</td>\n",
       "      <td>2020-09-10 05:43:08</td>\n",
       "      <td>294</td>\n",
       "      <td>3</td>\n",
       "      <td>SOOOOO im on about cycle 1500 of my first base...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           subreddit                author  \\\n",
       "0  Oxygennotincluded  TrumpByPublicOpinion   \n",
       "1  Oxygennotincluded          DaHedgehog27   \n",
       "2  Oxygennotincluded       KittehNevynette   \n",
       "3  Oxygennotincluded           Turalyon135   \n",
       "4  Oxygennotincluded      FoxRealistic3370   \n",
       "\n",
       "                                               title  \\\n",
       "0  Mod Idea - In game Programmable Logic Controllers   \n",
       "1  Mod Request - Removing Construction Supply fro...   \n",
       "2    Fertiliser flatulence power question. How much?   \n",
       "3                                Automation question   \n",
       "4                         Perseverance or Experience   \n",
       "\n",
       "                                            selftext  score  created_utc  \\\n",
       "0  Hey everyone,\\n\\nBeen playing the game some ti...      1   1599762597   \n",
       "1  I have zero clue when it comes to modding this...      1   1599752065   \n",
       "2  I saw a YT video where fertiliser synthesisers...      1   1599745896   \n",
       "3  Is there a way using a gate or any kind to hav...      1   1599737435   \n",
       "4  SOOOOO im on about cycle 1500 of my first base...      1   1599730988   \n",
       "\n",
       "          eastern_time  post_word_count  title_word_count  \\\n",
       "0  2020-09-10 14:29:57              108                 8   \n",
       "1  2020-09-10 11:34:25              104                 8   \n",
       "2  2020-09-10 09:51:36              159                 6   \n",
       "3  2020-09-10 07:30:35              148                 2   \n",
       "4  2020-09-10 05:43:08              294                 3   \n",
       "\n",
       "                                       stripped_text  \n",
       "0  Hey everyone, playing the game some time now a...  \n",
       "1  I have zero clue when it comes to modding this...  \n",
       "2  I saw a YT video where fertiliser synthesisers...  \n",
       "3  Is there a way using a gate or any kind to hav...  \n",
       "4  SOOOOO im on about cycle 1500 of my first base...  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# VADER Sentiment Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "sia = SentimentIntensityAnalyzer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>neg</th>\n",
       "      <th>neu</th>\n",
       "      <th>pos</th>\n",
       "      <th>compound</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.047</td>\n",
       "      <td>0.781</td>\n",
       "      <td>0.173</td>\n",
       "      <td>0.9107</td>\n",
       "      <td>Hey everyone, playing the game some time now a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.031</td>\n",
       "      <td>0.936</td>\n",
       "      <td>0.033</td>\n",
       "      <td>0.0387</td>\n",
       "      <td>I have zero clue when it comes to modding this...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.040</td>\n",
       "      <td>0.841</td>\n",
       "      <td>0.119</td>\n",
       "      <td>0.9226</td>\n",
       "      <td>I saw a YT video where fertiliser synthesisers...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.083</td>\n",
       "      <td>0.830</td>\n",
       "      <td>0.087</td>\n",
       "      <td>-0.3400</td>\n",
       "      <td>Is there a way using a gate or any kind to hav...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.049</td>\n",
       "      <td>0.764</td>\n",
       "      <td>0.187</td>\n",
       "      <td>0.9921</td>\n",
       "      <td>SOOOOO im on about cycle 1500 of my first base...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     neg    neu    pos  compound  \\\n",
       "0  0.047  0.781  0.173    0.9107   \n",
       "1  0.031  0.936  0.033    0.0387   \n",
       "2  0.040  0.841  0.119    0.9226   \n",
       "3  0.083  0.830  0.087   -0.3400   \n",
       "4  0.049  0.764  0.187    0.9921   \n",
       "\n",
       "                                                text  \n",
       "0  Hey everyone, playing the game some time now a...  \n",
       "1  I have zero clue when it comes to modding this...  \n",
       "2  I saw a YT video where fertiliser synthesisers...  \n",
       "3  Is there a way using a gate or any kind to hav...  \n",
       "4  SOOOOO im on about cycle 1500 of my first base...  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Code adapted from local lect: Modeling with VADER\n",
    "\n",
    "dicts = []    \n",
    "\n",
    "for post in df['stripped_text']:   #loops through the individual post in the corpus\n",
    "    scores = sia.polarity_scores(post)   #gets the sentiment scores for each post\n",
    "    scores['text'] = post #puts post in a 'text' column\n",
    "    dicts.append(scores)  #adds scores & text to empty dictionary\n",
    "\n",
    "df_sia = pd.DataFrame(dicts)   #makes dataframe from empty dictionary\n",
    "df_sia.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(16533, 5)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_sia.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_sia['subreddit'] = df['subreddit'].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 720x576 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (10, 8));\n",
    "df_sia.groupby('subreddit').mean()[['pos', 'neg', 'compound']].plot(kind='barh')\n",
    "plt.title('Average Positive, Negative & Compound Scores by Subreddit');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "subreddit\n",
       "Oxygennotincluded    0.165461\n",
       "RimWorld             0.068434\n",
       "Name: compound, dtype: float64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_sia.groupby('subreddit')['compound'].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modeling with CountVectorizer and LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df_sia[['text', 'compound', 'neg', 'neu', 'pos']]\n",
    "y = df_sia['subreddit']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Oxygennotincluded    0.549205\n",
       "RimWorld             0.450795\n",
       "Name: subreddit, dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 3000, stratify = y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "cvec = CountVectorizer(stop_words = 'english')\n",
    "Z_train = cvec.fit_transform(X_train['text'])\n",
    "Z_test = cvec.transform(X_test['text'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_Z_train = pd.DataFrame(Z_train.todense(), \n",
    "                          columns=cvec.get_feature_names())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_Z_test = pd.DataFrame(Z_test.todense(), \n",
    "                         columns = cvec.get_feature_names())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_Z_train.reset_index(drop=True, inplace=True)\n",
    "X_train.reset_index(drop=True, inplace=True)\n",
    "\n",
    "df_Z_test.reset_index(drop=True, inplace = True)\n",
    "X_test.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>00</th>\n",
       "      <th>000</th>\n",
       "      <th>0000</th>\n",
       "      <th>000000nothing</th>\n",
       "      <th>0000kcal</th>\n",
       "      <th>0001k</th>\n",
       "      <th>000g</th>\n",
       "      <th>000germs</th>\n",
       "      <th>000kcal</th>\n",
       "      <th>000kg</th>\n",
       "      <th>...</th>\n",
       "      <th>ᶠᵘᶜᵏ</th>\n",
       "      <th>ᶦˢ</th>\n",
       "      <th>ᶦᶠ</th>\n",
       "      <th>ㅠㅜ</th>\n",
       "      <th>刷新选人</th>\n",
       "      <th>text</th>\n",
       "      <th>compound</th>\n",
       "      <th>neg</th>\n",
       "      <th>neu</th>\n",
       "      <th>pos</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>I know that you can't stack clothing/guns beca...</td>\n",
       "      <td>-0.395</td>\n",
       "      <td>0.108</td>\n",
       "      <td>0.892</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows × 27380 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   00  000  0000  000000nothing  0000kcal  0001k  000g  000germs  000kcal  \\\n",
       "0   0    0     0              0         0      0     0         0        0   \n",
       "\n",
       "   000kg  ...  ᶠᵘᶜᵏ  ᶦˢ  ᶦᶠ  ㅠㅜ  刷新选人  \\\n",
       "0      0  ...     0   0   0   0     0   \n",
       "\n",
       "                                                text  compound    neg    neu  \\\n",
       "0  I know that you can't stack clothing/guns beca...    -0.395  0.108  0.892   \n",
       "\n",
       "   pos  \n",
       "0  0.0  \n",
       "\n",
       "[1 rows x 27380 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined_Z_train = pd.concat([df_Z_train, X_train], axis =1)\n",
    "combined_Z_train.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>00</th>\n",
       "      <th>000</th>\n",
       "      <th>0000</th>\n",
       "      <th>000000nothing</th>\n",
       "      <th>0000kcal</th>\n",
       "      <th>0001k</th>\n",
       "      <th>000g</th>\n",
       "      <th>000germs</th>\n",
       "      <th>000kcal</th>\n",
       "      <th>000kg</th>\n",
       "      <th>...</th>\n",
       "      <th>ᶠᵘᶜᵏ</th>\n",
       "      <th>ᶦˢ</th>\n",
       "      <th>ᶦᶠ</th>\n",
       "      <th>ㅠㅜ</th>\n",
       "      <th>刷新选人</th>\n",
       "      <th>text</th>\n",
       "      <th>compound</th>\n",
       "      <th>neg</th>\n",
       "      <th>neu</th>\n",
       "      <th>pos</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>I was watching some videos about base cooling ...</td>\n",
       "      <td>0.915</td>\n",
       "      <td>0.054</td>\n",
       "      <td>0.775</td>\n",
       "      <td>0.17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows × 27380 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   00  000  0000  000000nothing  0000kcal  0001k  000g  000germs  000kcal  \\\n",
       "0   0    0     0              0         0      0     0         0        0   \n",
       "\n",
       "   000kg  ...  ᶠᵘᶜᵏ  ᶦˢ  ᶦᶠ  ㅠㅜ  刷新选人  \\\n",
       "0      0  ...     0   0   0   0     0   \n",
       "\n",
       "                                                text  compound    neg    neu  \\\n",
       "0  I was watching some videos about base cooling ...     0.915  0.054  0.775   \n",
       "\n",
       "    pos  \n",
       "0  0.17  \n",
       "\n",
       "[1 rows x 27380 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined_Z_test = pd.concat([df_Z_test, X_test], axis =1)\n",
    "combined_Z_test.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "combined_Z_train.drop(columns = 'text', inplace=True)\n",
    "combined_Z_test.drop(columns = 'text', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "logreg = LogisticRegression(solver = 'liblinear')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9168482348501608"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cross_val_score(logreg, combined_Z_train, y_train).mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(solver='liblinear')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logreg.fit(combined_Z_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.9765303653520445, 0.9165457184325109)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logreg.score(combined_Z_train, y_train), logreg.score(combined_Z_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "preds_sia = logreg.predict(combined_Z_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(logreg, combined_Z_test, y_test, cmap = 'Reds', values_format = 'd')\n",
    "plt.title('Confusion Matrix for VADER\\nwith LogisticRegression Model', fontsize = 12);"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
